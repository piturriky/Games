# Create your views here.

from django.http import HttpResponse, Http404
from django.template import Context
from django.template.loader import get_template
from django.contrib.auth.models import User
from igames.models import *
from django.core import serializers
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.http import HttpResponseRedirect
from django.shortcuts import render, redirect
from django.views.generic.edit import CreateView,UpdateView,DeleteView
from sets import Set
from igames.forms import *
import json
import os.path
from django.contrib.auth.decorators import login_required
from django.core import urlresolvers
from django.core.exceptions import PermissionDenied
from django.utils.decorators import method_decorator
from rest_framework import generics, permissions
from serializers import *
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.shortcuts import get_object_or_404

def mainpage(request):
	template = get_template('mainpage.html')
	variables = Context({
		'titlehead': 'Games aPP',
		'pagetitle': 'Welcome to the Games aPPlication',
		'contentbody': 'Managing the development of games since 2014',
		'user': request.user,
		})
	output = template.render(variables)
	return HttpResponse(output)

def userpage(request, username, fm):
	if not request.user.is_authenticated():
        	return redirect('/login')
	try:
		user = User.objects.get(username=username)
	except:
		raise Http404('User not found.')

	if not fm:
		games = Game.objects.filter(developers=user)
		platforms = Set([])
		companies = Set([])
		for game in games:
			companies.add(game.company)
			for platform in game.platforms.all():
				platforms.add(platform)
	
		template = get_template('userpage.html')
		variables = Context({
			'user': user,
			'games': games,
			'platforms': platforms,
			'companies': companies,
		
			})
		output = template.render(variables)
		return HttpResponse(output)

	elif fm == ".xml":
		data = serializers.serialize("xml",User.objects.filter(username=username))
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",User.objects.filter(username=username))
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.') 

def userspage(request, fm):
	if not request.user.is_authenticated():
        	return redirect('/login')

	if not fm:	
		template = get_template('generalpage.html')
		developers = User.objects.all()
		variables = Context({
			'title': 'Developers',
			'vars': developers,
			'link': 'developers',
			})
		output = template.render(variables)
		return HttpResponse(output)
	elif fm == ".xml":
		data = serializers.serialize("xml",User.objects.all())
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",User.objects.all())
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.')

def gamepage(request, gamename,fm):
	if not request.user.is_authenticated():
        	return redirect('/login')
	try:
		game = Game.objects.get(name=gamename)
	except:
		raise Http404('Game not found.')

	if not fm:
		template = get_template('gamepage.html')
		owner = False
		if request.user.is_staff:
			owner = True
		else:
			for developer in game.developers.all():
				if developer.username == request.user.username:
					owner = True
		
		variables = Context({
			'game': game,
			'owner': owner,
			'RATING_CHOICES' : GameReview.RATING_CHOICES,
			})
		output = template.render(variables)
		return render_to_response('gamepage.html', variables, context_instance = RequestContext(request));
	elif fm == ".xml":
		data = serializers.serialize("xml",Game.objects.filter(name=gamename))
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",Game.objects.filter(name=gamename))
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.')

def gamespage(request, fm):
	if not request.user.is_authenticated():
        	return redirect('/login')
	if not fm:
		template = get_template('generalpage.html')
		games = Game.objects.all()
		staff = False
		if request.user.is_staff:
			staff = True
		variables = Context({
			'title': 'Games',
			'vars': games,
			'link': 'games',
			'staff': staff,
			})
		output = template.render(variables)
		return HttpResponse(output)
	elif fm == ".xml":
		data = serializers.serialize("xml",Game.objects.all())
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",Game.objects.all())
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.')

def companypage(request, companyname, fm):
	if not request.user.is_authenticated():
        	return redirect('/login')
	try:
		company = Company.objects.get(name=companyname)
		games = Game.objects.filter(company=company)
	except:
		raise Http404('Company not found.')

	if not fm:
		developers = Set([])
		platforms = Set([])
		for game in games:
			for platform in game.platforms.all():
				platforms.add(platform)
			for developer in game.developers.all():
				developers.add(developer)

		template = get_template('companypage.html')
		owner = False
		if request.user.is_staff:
			owner = True
		variables = Context({
			'company': company,
			'games':games,
			'platforms': platforms,
			'developers':developers,
			'owner': owner,
			})
		output = template.render(variables)
		return HttpResponse(output)
	elif fm == ".xml":
		data = serializers.serialize("xml",Company.objects.all())
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",Company.objects.all())
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.')

def companiespage(request, fm):
	if not request.user.is_authenticated():
        	return redirect('/login')
	if not fm:	
		template = get_template('generalpage.html')
		companies = Company.objects.all()
		staff = False
		if request.user.is_staff:
			staff = True
		variables = Context({
			'title': 'Companies',
			'vars': companies,
			'link': 'companies',
			'staff':staff,
			})
		output = template.render(variables)
		return HttpResponse(output)
	elif fm == ".xml":
		data = serializers.serialize("xml",Company.objects.all())
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",Company.objects.all())
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.')

def platformpage(request, platformname,fm):
	if not request.user.is_authenticated():
        	return redirect('/login')
	try:
		platform = Platform.objects.get(name=platformname)
		games = Game.objects.filter(platforms=platform)
	except:
		raise Http404('Platform not found.')

	if not fm:
		developers = Set([])
		companies = Set([])
		for game in games:
			companies.add(game.company)
			for developer in game.developers.all():
				developers.add(developer)

		template = get_template('platformpage.html')
		owner = False
		if request.user.is_staff:
			owner = True
		variables = Context({
			'platform': platform,
			'games':games,
			'companies': companies,
			'developers':developers,
			'owner':owner,
			})
		output = template.render(variables)
		return HttpResponse(output)
	elif fm == ".xml":
		data = serializers.serialize("xml",Platform.objects.filter(name=platformname))
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",Platform.objects.filter(name=platformname))
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.')

def platformspage(request,fm):
	if not request.user.is_authenticated():
        	return redirect('/login')
	if not fm:
		template = get_template('generalpage.html')
		platforms = Platform.objects.all()
		staff = False
		if request.user.is_staff:
			staff = True
		variables = Context({
			'title': 'Platforms',
			'vars': platforms,
			'link': 'platforms',
			'staff':staff,
			})
		output = template.render(variables)
		return HttpResponse(output)
	elif fm == ".xml":
		data = serializers.serialize("xml",Platform.objects.all())
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",Platform.objects.all())
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.')

def register(request):
    if request.method == 'POST':
        form = UserCreateForm(request.POST)
        if form.is_valid():
            new_user = form.save()
            return HttpResponseRedirect("/login")
    else:
        form = UserCreateForm()
    return render(request, "registration/register.html", {
        'form': form,
    })

def mygamespage(request, fm):
	if not request.user.is_authenticated():
        	return redirect('/login')
	try:
		user = User.objects.get(username=request.user.username)
	except:
		raise Http404('User not found.')

	if not fm:
		template = get_template('generalpage.html')
		games = Game.objects.filter(developers=user)
		variables = Context({
			'title': 'Games',
			'vars': games,
			'link': 'games',
			'staff': True
			})
		output = template.render(variables)
		return HttpResponse(output)
	elif fm == ".xml":
		data = serializers.serialize("xml",Game.objects.filter(developers=user))
		return HttpResponse(data, mimetype="application/xml")
	elif fm == '.json':
		data = serializers.serialize("json",Game.objects.filter(developers=user))
		return HttpResponse(data, mimetype="application/json")
	else:
		raise Http404('Page not found.')

class LoginRequiredMixin(object):
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(LoginRequiredMixin, self).dispatch(*args, **kwargs)

class CheckIsOwnerOrAdminMixin(object):
    def get_object(self, *args, **kwargs):
        obj = super(CheckIsOwnerOrAdminMixin, self).get_object(*args, **kwargs)
	owner = False
        if self.request.user.is_staff:
            owner = True
	for developer in obj.developers.all():
		if developer.username == self.request.user.username:
			owner = True
	if not owner:
		raise PermissionDenied
        return obj
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(CheckIsOwnerOrAdminMixin, self).dispatch(*args, **kwargs)

class CheckIsAdminMixin(object):
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
	if not self.request.user.is_staff:
            raise PermissionDenied
        return super(CheckIsAdminMixin, self).dispatch(*args, **kwargs)

class GameCreate(LoginRequiredMixin,CreateView):
	model = Game
	template_name = 'form.html'
	form_class = GameForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(GameCreate,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(GameCreate, self).get_context_data(**kwargs)
		context['title'] = 'Create Game'
		return context

class GameEdit(CheckIsOwnerOrAdminMixin,UpdateView):
	model = Game
	template_name = 'form.html'
	form_class = GameForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(GameEdit,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(GameEdit, self).get_context_data(**kwargs)
		context['title'] = 'Edit Game'
		return context


class GameDelete(CheckIsOwnerOrAdminMixin,DeleteView):
	model = Game
	template_name = 'formdelete.html'
	form_class = GameForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(GameDelete,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(GameDelete, self).get_context_data(**kwargs)
		context['title'] = 'Delete Game'
		return context

class CompanyCreate(CheckIsAdminMixin,CreateView):
	model = Company
	template_name = 'form.html'
	form_class = CompanyForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(CompanyCreate,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(CompanyCreate, self).get_context_data(**kwargs)
		context['title'] = 'Create Company'
		return context

class CompanyEdit(CheckIsAdminMixin,UpdateView):
	model = Company
	template_name = 'form.html'
	form_class = CompanyForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(CompanyEdit,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(CompanyEdit, self).get_context_data(**kwargs)
		context['title'] = 'Edit Company'
		return context

class CompanyDelete(CheckIsAdminMixin,DeleteView):
	model = Company
	template_name = 'formdelete.html'
	form_class = CompanyForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(CompanyDelete,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(CompanyDelete, self).get_context_data(**kwargs)
		context['title'] = 'Delete Company'
		return context

class PlatformCreate(CheckIsAdminMixin,CreateView):
	model = Platform
	template_name = 'form.html'
	form_class = PlatformForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(PlatformCreate,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(PlatformCreate, self).get_context_data(**kwargs)
		context['title'] = 'Create Platform'
		return context

class PlatformEdit(CheckIsAdminMixin,UpdateView):
	model = Platform
	template_name = 'form.html'
	form_class = PlatformForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(PlatformEdit,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(PlatformEdit, self).get_context_data(**kwargs)
		context['title'] = 'Edit Platform'
		return context

class PlatformDelete(CheckIsAdminMixin,DeleteView):
	model = Platform
	template_name = 'formdelete.html'
	form_class = PlatformForm

	def form_valid(self,form):
		form.instance.user = self.request.user
		return super(PlatformDelete,self).form_valid(form)

	def get_context_data(self, **kwargs):
		context = super(PlatformDelete, self).get_context_data(**kwargs)
		context['title'] = 'Delete Platform'
		return context

@login_required()
def review(request, name):
    game = get_object_or_404(Game, name=name)
    new_review = GameReview(
        rating=request.POST['rating'],
        comment=request.POST['comment'],
        user=request.user,
        game=game)
    new_review.save()
    #return HttpResponseRedirect(urlresolvers.reverse('game-detail', args=(game.name)))
    return HttpResponseRedirect(urlresolvers.reverse("/games/"+game.name))



### RESTful API views ###

class IsOwnerOrReadOnly(permissions.BasePermission):

    def has_object_permission(self, request, view, obj):
        # Read permissions are allowed to any request,
        # so we'll always allow GET, HEAD or OPTIONS requests.
        if request.method in permissions.SAFE_METHODS:
            return True

	if request.user.is_staff:
		return True

	if isinstance(obj,Game):
		for developer in obj.developers.all():
			if developer.username == request.user.username:
				return True
        return False

class APIDeveloperList(generics.ListCreateAPIView):
    permission_classes = (IsOwnerOrReadOnly,)
    model = User
    serializer_class = DeveloperSerializer
    lookup_field = 'username'

class APIDeveloperDetail(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = (IsOwnerOrReadOnly,)
    model = User
    serializer_class = DeveloperSerializer
    lookup_field = 'username'

class APIGameList(generics.ListCreateAPIView):
    permission_classes = (IsOwnerOrReadOnly,)
    model = Game
    serializer_class = GameSerializer
    lookup_field = 'name'

class APIGameDetail(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = (IsOwnerOrReadOnly,)
    model = Game
    serializer_class = GameSerializer
    lookup_field = 'name'

class APICompanyList(generics.ListCreateAPIView):
    permission_classes = (IsOwnerOrReadOnly,)
    model = Company
    serializer_class = CompanySerializer
    lookup_field = 'name'

class APICompanyDetail(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = (IsOwnerOrReadOnly,)
    model = Company
    serializer_class = CompanySerializer
    lookup_field = 'name'

class APIPlatformList(generics.ListCreateAPIView):
    permission_classes = (IsOwnerOrReadOnly,)
    model = Platform
    serializer_class = PlatformSerializer
    lookup_field = 'name'

class APIPlatformDetail(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = (IsOwnerOrReadOnly,)
    model = Platform
    serializer_class = PlatformSerializer
    lookup_field = 'name'
